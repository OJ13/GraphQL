GraphQL

O que é GraphQL?
(https://graphql.org/)
    É uma linguagem de consultas de API, é como se fosse uma query dinamica para uma API
trazer retornos dinamicos. Trazendo para o front somente o que é necessário.
    Quem diz os campos que gostaria de receber da API é o front end.

Rest Vs GraphQL
Dentro do Rest nós fazemos vários endpoints, para termos um determinado retorno.
Já em GraphQL voce vai ter apenas uma URL e no body da requisição você envia uma query graphQL,
então o servidor vai ver essa consulta e devolver aquilo que você solicitou.

Como os Dados São Organizados
São organizados como Grapho, que tem 'nós' e 'arestas', nesse caso, você vai navegando nos dados
como se fosse um grande grapho, podendo aessar em qualquer nó, para chegar em outras informações

Vamos utilizar o ApolloServer e o gql.
Palavras chaves: typeDefs (schema), resolvers (resolvers)
Na configuração do ApolloServer configuramos, duas coisas principais o:
 - gql:  (schema)configuração de "assinatura" da sua query
 - resolvers: o que sua query ira fazer
O ApolloServer nos permite utilizar uma ferramenta no brownser para podemos conferir nossas querys e 
mutations (localhost:4000)
Keyword Commentary: (Ctrl + ;)

 Tipos Básicos do GraphQL
Os tipos suportados pelo GraphQL são: Int, Float, String, Boolean, Id.
Para criarmos um novo tipo de dados, usamos o nome 'scalar', na parte de criar a query,
então com a criação desse tipo, conseguimos retornar um tipo novo.

Criando um novo tipo
Nesse caso no schema usamos a variavel 'type'.
Para dizer que o campo é Obrigatório colocamos o '!' após o tipo do dado

Resolvers
Podemos mapear o Schema junto ao que vier do banco por exemplo, caso os nomes dados
campos sejam distintos, para resolver isso criamos dentro do mesmo resolvers, criando o 
tipo, passando os campos que precisam ser ajustados


Array
Para criar array no momento em que voce descreve dentro da sua query o tipo dentro de um array:
exemplo: Idades: [Int]
Quando executado, valores 'scalares' não trazem todos os dados, então na hora de fazer a consulta, 
tem que descrever os itens que você quer verificar na consulta

Passando Parâmetros para Consulta
Temos que colocar na nossa gql, o parentese e passando o parâmetro, e depois passamos no nosso resolvers
com o segundo parametro sendo args, podendo acessar todos os argumentos

Vínculando Objetos
Cria-se no gql e no resolver, trazendo um tipo dentro do outro (como no caso, entre usuário e perfil)

Fragment
É possível criar um "Fragmento" que é o retorno de alguns atributos comuns, que é como se ele trouxer
uma consulta que tras alguns valores "padrão", podendo reutilizar suas consultas sempre que quiser

Refatoracao
Podemos dividir em pastas, distintas, e usar o 'graphql-import' baixado via npm

Mutation
Existe um tipo Mutation.
Sempre que for haver uma mudança, um CREATE, DELETE, UPDATE, vamos utilizar a Mutation, a query é para consultas
a mesmas recebem parametros iguais, e tanto Query como Mutation tem que criar Resolvers.
Para executar a mutation, temos que utilizar a nomenclarura mutation antes das chaves, para utilizalo

Spread
Na função dentro do resolvers podemos usar o 'args' como segundo argumento, e utilizar o operador spread,
que ele retornar todo os parametros dentro da sua funçao, podemos utilizar o spread para atualizar os 
dados passando os argumentos, e sempre vai levar em consideração os ultimos passados(exemplo: alterarUsuario)

Input
É uma forma que você tem de criar uma entrada de dados genérica, o ideal é um input por mutation, porém isso
vai depender de cada caso.
Criando um tipo Input dentro no .graphql, podemos utilizar dentro dos nossos resolvers, então ao invés de utilizar
o 'args', podemos utilizar o novo input que criamos
Podemos utilizar isso tanto em Query como em Mutation.
Podemos utilizar nos resolvers, mais de um, exemplo um de filtro e um de dados, etc.

Knex
(knexjs.org)
Ele é um Query builder usado muito no ambiente Node.js
Para utilizar o MySql, vamos utilizar uma biblioteca chamada Knex, após a instalação via npm usamos o comando 
'npx knex init', o mesmo criar um arquivo (knexfile.js), esse arquivo iremos utilizar para configurar a conexão
de banco. Nós vamos criar todas nossas migrations apartir dele, um comando para exemplo: 
'npx knex migrate:make {nometabela}', para criar a migration.
Para verificar as funções disponíveis, só executar o comando 'npx knex'.
quando criamos uma nova migration, ele internamente ele cria dois métodos sozinho (exports.up, exports.down)
o 'Up' é para criação, alteração de colunas, update de restrições, agora no 'Down' é para exclusão de entidades,
remoção de colunas, etc, ou seja o 'up' é para evolução e o 'down' para regressão.
Para executar a ultima migration usamos o comando 'npx knex migrate:latest' e para voltar usamos o comando
'npx knex migrate:rollback'.
Sempre coloque o inverso do que está sendo feito no 'Up' no 'Down', para que na execução da migration em rollback,
faça o inverso, e assim suas migrations ficam integras

Criando os acessos:
Depois do arquivo de configuração criado (knexfile.js), criamos um arquivo de configuração, ex: db.js, a partir dele,
então conseguimos criar nossas regras e iteragir com o banco de dados.
A partir de agora conseguimos utilizar o 'Code Runner' -> (Ctrl + Alt + N) Executa e (Ctrl + Alt + M) para a execução 
do arquivo 'knex'. (Exemplo: Udemy/banco-de-dados/projeto/tests), no exercicios testes, vamos abrir conexão com knex, 
e temos que no finally, fechar essa conexão com db.destroy(), numa aplicação real usamos o pool de conexões que configuramos
no arquivo (knexfile), "pool de conexão - é uma configuração para que as conexões fiquem "abertas" para o reaproveitamento
da conexão e assim ganho de performance da aplicação com as conexões com o banco de dados"

Na hora da execução é criação de funções podemos utilizar as formas de controle de execução:
Promise - quando estiver pronta ela utiliza o then
Async / Wait - espera ficar pronta a função await para continuar

O promise ele escalona uma série de "tarefas", uma esperando a outra, porém para realmente, forçar um processo, ha 
aguardar uma execução em JavaScript, usamos o async -> wait

Query JOIN em Knex
Para criarmos uma query com join utilizando o knex, usamos a function join() passando 3 parametros, (tabela de ligação,
campo da fk na tabela raiz, campo da fk na tabela de ligação) [para mais informações documentação do knex]

Relacionamentos, podemos fazer relacionamentos, entre as entidades e assim fazer com que tenhamos acesso de dentro de uma
query dentro da outra, verifique o exemplo, no (Type Perfill), agora dentro de perfil conseguimos tambem verificar os usuarios
isso faz com que possamos ir e voltar dentro de consultas
















